user www-data;
worker_processes 4;
pid /var/run/nginx.pid;
daemon off;

events {
  worker_connections 768;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  # todo: uncomment if needed
  # request_id on;
  # request_id_from_header on;

  map $msec $msec_no_decimal {
    ~(.*)\.(.*) $1$2;
  }

  access_log /dev/stdout;
  error_log /dev/stderr;

  keepalive_timeout 100;
  proxy_connect_timeout 10s;
  proxy_send_timeout 30s;
  proxy_read_timeout 60s;

  types_hash_max_size 2048;
  server_names_hash_bucket_size 64;
  proxy_buffer_size 16k;
  proxy_buffers 8 16k;
  client_max_body_size 3000m;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  gzip on;
  gzip_types text/plain
    text/css
    application/javascript
    application/x-javascript
    text/xml
    application/xml
    application/xml+rss
    text/javascript
    application/json;

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;

  fastcgi_intercept_errors on;

  ## UI/API Upstream
  server {
    # todo: Define your farm UI domain
    server_name your-farm.host;
    listen [::]:80;
    listen 80;

    root /opt/app/dist/public;

    location / {
      try_files $uri @node;
    }

    location @node {
      proxy_pass http://unix:/opt/app/dist/run/server.sock;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect off;
    }
  }

  ## Instances upstream

  server {
    # For HTTPS use your ssl configuration
    # include common/ssl;
    # Otherwise uses HTTP by default

    # todo:
    # Define reg expr for your app instances domain
    # Update domain in other locations too
    server_name ~^(?<hash>.+)\.your-farm\.host$;
    listen [::]:80;
    listen 80;

    error_page 502 /error502;
    location = /error502 {
      expires -1;
      add_header 'Cache-Control'
        'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
      # todo:
      return 301 https://your-farm.host/instance/$hash;
    }

    error_page 404 /error404;
    location = /error404 {
      expires -1;
      add_header 'Cache-Control'
        'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
      # todo:
      return 301 https://your-farm.host/instance/$hash;
    }

    location / {
      # todo:
      # Uncomment needed variant
      # try_files $uri @farm_vm_to_docker_proxy;
      # try_files $uri @farm_container_to_instance_container;
    }

    location @farm_vm_to_docker_proxy {
      proxy_pass http://127.0.0.1:3004;

      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_intercept_errors on;
      proxy_connect_timeout 5s;
      proxy_send_timeout 5s;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Request-ID $request_id;
      # Increase buffer size so that CSP header fits in buffer.
      proxy_buffer_size 16k;
      proxy_buffers 8 16k;
      proxy_busy_buffers_size 16k;
    }

   location @farm_container_to_instance_container {
      # use docker resolver
      resolver 127.0.0.11 ipv6=off;
      # do not change this url, container prefix is constant
      proxy_pass http://farm-docker-$hash;
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_intercept_errors on;
      proxy_connect_timeout 5s;
      proxy_send_timeout 5s;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Request-ID $request_id;
      proxy_buffer_size 16k;
      proxy_buffers 8 16k;
      proxy_busy_buffers_size 16k;
    }
  }
}
